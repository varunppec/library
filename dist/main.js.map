{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/runtime/global","webpack:///./node_modules/@firebase/util/dist/index.esm2017.js","webpack:///./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack:///./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack:///./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack:///./node_modules/firebase/app/dist/index.esm.js","webpack:///./node_modules/@firebase/database/dist/index.esm2017.js","webpack:///./src/index.js"],"sourcesContent":["__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nfunction promisifyRequest(request, errorMessage) {\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = event => {\r\n            resolve(event.target.result);\r\n        };\r\n        request.onerror = event => {\r\n            var _a;\r\n            reject(`${errorMessage}: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n        };\r\n    });\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass DBWrapper {\r\n    constructor(_db) {\r\n        this._db = _db;\r\n        this.objectStoreNames = this._db.objectStoreNames;\r\n    }\r\n    transaction(storeNames, mode = 'readonly') {\r\n        return new TransactionWrapper(this._db.transaction.call(this._db, storeNames, mode));\r\n    }\r\n    createObjectStore(storeName, options) {\r\n        return new ObjectStoreWrapper(this._db.createObjectStore(storeName, options));\r\n    }\r\n    close() {\r\n        this._db.close();\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass TransactionWrapper {\r\n    constructor(_transaction) {\r\n        this._transaction = _transaction;\r\n        this.complete = new Promise((resolve, reject) => {\r\n            this._transaction.oncomplete = function () {\r\n                resolve();\r\n            };\r\n            this._transaction.onerror = () => {\r\n                reject(this._transaction.error);\r\n            };\r\n            this._transaction.onabort = () => {\r\n                reject(this._transaction.error);\r\n            };\r\n        });\r\n    }\r\n    objectStore(storeName) {\r\n        return new ObjectStoreWrapper(this._transaction.objectStore(storeName));\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ObjectStoreWrapper {\r\n    constructor(_store) {\r\n        this._store = _store;\r\n    }\r\n    index(name) {\r\n        return new IndexWrapper(this._store.index(name));\r\n    }\r\n    createIndex(name, keypath, options) {\r\n        return new IndexWrapper(this._store.createIndex(name, keypath, options));\r\n    }\r\n    get(key) {\r\n        const request = this._store.get(key);\r\n        return promisifyRequest(request, 'Error reading from IndexedDB');\r\n    }\r\n    put(value, key) {\r\n        const request = this._store.put(value, key);\r\n        return promisifyRequest(request, 'Error writing to IndexedDB');\r\n    }\r\n    delete(key) {\r\n        const request = this._store.delete(key);\r\n        return promisifyRequest(request, 'Error deleting from IndexedDB');\r\n    }\r\n    clear() {\r\n        const request = this._store.clear();\r\n        return promisifyRequest(request, 'Error clearing IndexedDB object store');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass IndexWrapper {\r\n    constructor(_index) {\r\n        this._index = _index;\r\n    }\r\n    get(key) {\r\n        const request = this._index.get(key);\r\n        return promisifyRequest(request, 'Error reading from IndexedDB');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction openDB(dbName, dbVersion, upgradeCallback) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(dbName, dbVersion);\r\n            request.onsuccess = event => {\r\n                resolve(new DBWrapper(event.target.result));\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(`Error opening indexedDB: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                upgradeCallback(new DBWrapper(request.result), event.oldVersion, event.newVersion, new TransactionWrapper(request.transaction));\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(`Error opening indexedDB: ${e.message}`);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @internal\r\n */\r\nasync function deleteDB(dbName) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.deleteDatabase(dbName);\r\n            request.onsuccess = () => {\r\n                resolve();\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(`Error deleting indexedDB database \"${dbName}\": ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(`Error deleting indexedDB database \"${dbName}\": ${e.message}`);\r\n        }\r\n    });\r\n}\n\nexport { CONSTANTS, DBWrapper, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, deleteDB, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, openDB, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, openDB, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.22\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.7.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, (db, oldVersion) => {\r\n            // We don't use 'break' in this switch statement, the fall-through\r\n            // behavior is what we want, because if there are multiple versions between\r\n            // the old version and the current version, we want ALL the migrations\r\n            // that correspond to those versions to run, not only the last one.\r\n            // eslint-disable-next-line default-case\r\n            switch (oldVersion) {\r\n                case 0:\r\n                    db.createObjectStore(STORE_NAME);\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.7.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { initializeApp } from \"firebase/app\";\nimport { getDatabase, onValue, ref, set } from \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDwYZUhtawHiR86Alb0fuYC4ZswUxWqOyw\",\n\n  authDomain: \"library-f10d9.firebaseapp.com\",\n\n  databaseURL:\n    \"https://library-f10d9-default-rtdb.asia-southeast1.firebasedatabase.app/\",\n\n  projectId: \"library-f10d9\",\n\n  storageBucket: \"library-f10d9.appspot.com\",\n\n  messagingSenderId: \"1036671491527\",\n\n  appId: \"1:1036671491527:web:8df0ae67f4306ae6d9cde2\",\n\n  measurementId: \"G-NZSP6F05F8\",\n};\n\n// Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\n\nlet myLibrary = [];\nlet properties = [\"name\", \"author\", \"pages\", \"read\"];\nconst container = document.querySelector(\".book-container\");\nconst form = document.querySelector(\".form\");\nconst test = ref(database);\nonValue(test, (snapshot) => {\n  const data = snapshot.val();\n  myLibrary = [...data.books];\n  displayBook();\n  console.log(data);\n});\n\n\n\nfunction Book(name, author, pages, read) {\n  this.name = name;\n  this.author = author;\n  this.pages = pages;\n  this.read = read;\n}\n\nfunction displayBook() {\n  const books = document.querySelectorAll(\".book\");\n  for (let book of books) {\n    book.parentElement.removeChild(book);\n  }\n  let count = 0;\n  for (let item of myLibrary) {\n    let book = document.createElement(\"div\");\n    book.setAttribute(\"data-value\", count++);\n    book.classList.add(`book`);\n    for (let property of properties) {\n      let div = document.createElement(\"div\");\n      div.classList.add(property);\n      book.append(div);\n      div.innerText = item[property];\n      if (property == \"pages\") div.innerText += \" pages\";\n      if (div.innerText == \"true\") {\n        div.innerText = \"Read\";\n        div.style.backgroundColor = \"green\";\n      }\n      if (div.innerText == \"false\") {\n        div.innerText = \"Not Read\";\n        div.style.backgroundColor = \"red\";\n      }\n      if (div.innerText == \"Read\" || div.innerText == \"Not Read\") {\n        div.classList.add(\"book_read\");\n        div.addEventListener(\"click\", function () {\n          readStatusUpdate(div, item);\n        });\n      }\n    }\n    const delete_button = document.createElement(\"button\");\n    book.append(delete_button);\n    delete_button.innerText = \"Delete\";\n    delete_button.id = \"delete\";\n    delete_button.onclick = function () {\n      delete_button.parentElement.parentElement.removeChild(\n        delete_button.parentElement\n      );\n      let index = delete_button.parentElement.getAttribute(\"data-value\");\n      console.log(index);\n      myLibrary.splice(index, 1);\n    };\n    container.append(book);\n  }\n}\n\nconst new_book = document.querySelector(\"#new_book\");\nconst modal = document.querySelector(\".modal\");\nnew_book.onclick = function () {\n  form.classList.add(\"clicked\");\n  modal.classList.remove(\"notclicked\");\n  modal.classList.add(\"clicked\");\n\n  form.classList.remove(\"notclicked\");\n};\nconst read_status = document.querySelector(\"#read_status\");\n  console.log(read_status);\n  read_status.onclick = function () {\n    console.log(new_book);\n    readStatusUpdate(read_status);\n  };\n\nform.onsubmit = function (e) {\n  e.preventDefault();\n  let name = form.children[0].value;\n  let author = form.children[1].value;\n  let pages = form.children[2].value;\n  let read = form.children[3].innerText == \"Read\" ? true : false;\n  const newBook = new Book(name, author, Number(pages), read);\n  myLibrary.push(newBook);\n  set(ref(database), {\n    books: myLibrary,\n  });\n\n  modal.classList.add(\"notclicked\");\n  modal.classList.remove(\"clicked\");\n\n  displayBook();\n};\nwindow.onclick = function (e) {\n  if (e.target == modal) {\n    modal.classList.add(\"notclicked\");\n    modal.classList.remove(\"clicked\");\n  }\n};\n\nfunction readStatusUpdate(div) {\n  if (div.innerText == \"Not Read\") {\n    div.style.backgroundColor = \"green\";\n    div.innerText = \"Read\";\n  } else {\n    div.style.backgroundColor = \"red\";\n    div.innerText = \"Not Read\";\n  }\n  // if (!book) return;\n  // if (div.innerText == \"Read\") {\n  //   book.read = true;\n  // } else {\n  //   book.read = false;\n  // }\n}\n"],"names":["globalThis","this","Function","e","window","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","reject","resolve","promise","Promise","wrapCallback","callback","catch","isMobileCordova","test","navigator","FirebaseError","code","customData","super","name","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","obj","call","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","promisifyRequest","request","errorMessage","onsuccess","event","result","onerror","_a","DBWrapper","_db","objectStoreNames","transaction","storeNames","mode","TransactionWrapper","createObjectStore","storeName","options","ObjectStoreWrapper","close","_transaction","complete","oncomplete","onabort","objectStore","_store","index","IndexWrapper","createIndex","keypath","get","put","delete","clear","_index","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","upgradeCallback","db","oldVersion","indexedDB","open","onupgradeneeded","newVersion","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","tx","computeKey","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","self","deleteDatabase","idbHeartbeatObject","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","apply","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","s","ln","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","headers","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","_path","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","defineProperties","MAX","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRecordContainsPath_","writeRecord","writeTreeDefaultFilter_","writeTreeLayerTree_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","visibleWrites","writeId","allWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","completeServerData","nodes","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcIndexedSlice","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessor","changePath","writesCache","accumulator","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","viewProcessorApplyServerOverwrite","oldViewCache","changedSnap","completeCache","filterServerNode","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyUserOverwrite","viewProcessorCacheHasChild","viewProcessorApplyMerge","viewProcessorApplyServerMerge","changedChildren","viewMergeTree","curViewCache","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","operation","viewProcessorApplyUserMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","viewProcessorApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointAddEventRegistration","serverCacheComplete","eventCacheComplete","syncPointGetView","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncPointHasCompleteView","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","lastWriteId","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeResetTree_","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removed","hadCompleteView","viewQueryId","_repo","syncPointRemoveEventRegistration","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queryKey","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoRemoveEventCallbackForQuery","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","childRef","exists","hasChildren","_checkNotDeleted","_root","validateWritablePath","validateFirebaseDataArg","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","process","env","authTokenProvider","isValidRootPathString","validateUrl","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoInterrupt","repoManagerDeleteRepo","apiName","simpleListen","echo","onEcho","registerDatabase","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","database","getApp","heartbeatController","triggerHeartbeat","_getProvider","getDatabase","myLibrary","properties","querySelector","Book","author","pages","displayBook","books","querySelectorAll","book","parentElement","item","setAttribute","classList","property","div","append","innerText","backgroundColor","readStatusUpdate","delete_button","onclick","getAttribute","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","new_book","modal","read_status","onsubmit","preventDefault","newBook"],"sourceRoot":""}